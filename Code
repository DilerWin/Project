import json
import os

from cryptography.fernet import Fernet
import telebot

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
# pip install pyTelegramBotAPI cryptography

# =============================
# Telegram Password Manager Bot
# =============================

KEY_FILE = "secret.key"  # –§–∞–π–ª —Å –∫–ª—é—á–æ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
DATA_FILE = "passwords.json"  # –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª–µ–π

def load_key():
    if os.path.exists(KEY_FILE):
        with open(KEY_FILE, "rb") as key_file:
            return key_file.read()
    else:
        key = Fernet.generate_key()
        with open(KEY_FILE, "wb") as key_file:
            key_file.write(key)
        return key

fernet = Fernet(load_key())

def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    else:
        return {}

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f)

# –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN =  '–í–∞—à —Ç–æ–∫–µ–Ω'
bot: object = telebot.TeleBot(TOKEN)

# –°—Ç–∞—Ç—É—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
STATE_NONE = 0
STATE_ADD_NAME = 1
STATE_ADD_PASS = 2
STATE_GET_NAME = 3
STATE_DELETE_NAME = 4

# –°–ª–æ–≤–∞—Ä—å to track user states and temporary data
user_states = {}

# –•–µ–ª–ø –∏ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞—Ä–æ–ª–µ–π.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å\n"
        "/get - –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å\n"
        "/list - –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π\n"
        "/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/help - –ü–æ–º–æ—â—å"
    )
    user_states.pop(message.from_user.id, None)

@bot.message_handler(commands=['help'])
def help_cmd(message):
    bot.send_message(message.chat.id,
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –∏–º—è –∏ –ø–∞—Ä–æ–ª—å)\n"
        "/get - –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å (—Å–ø—Ä–æ—à—É –∏–º—è)\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π\n"
        "/delete - –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å (—Å–ø—Ä–æ—à—É –∏–º—è)\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"
    )
    user_states.pop(message.from_user.id, None)

@bot.message_handler(commands=['cancel'])
def cancel(message):
    user_states.pop(message.from_user.id, None)
    bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
@bot.message_handler(commands=['list'])
def list_entries(message):
    data = load_data()
    uid = str(message.from_user.id)
    if uid in data and data[uid]:
        names = "\n".join(data[uid].keys())
        bot.send_message(message.chat.id, f"–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n{names}")
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - –ø–µ—Ä–≤—ã–π —à–∞–≥: –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@bot.message_handler(commands=['add'])
def cmd_add(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Email'):")
    user_states[message.from_user.id] = {"state": STATE_ADD_NAME}

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è - –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@bot.message_handler(commands=['get'])
def cmd_get(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:")
    user_states[message.from_user.id] = {"state": STATE_GET_NAME}

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ - –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
@bot.message_handler(commands=['delete'])
def cmd_delete(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    user_states[message.from_user.id] = {"state": STATE_DELETE_NAME}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def state_handler(message):
    uid = message.from_user.id
    text = message.text.strip()

    if uid not in user_states:
        bot.send_message(message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É. –î–ª—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help")
        return

    state_info = user_states[uid]
    state = state_info.get("state", STATE_NONE)

    if state == STATE_ADD_NAME:
        if not text:
            bot.send_message(message.chat.id, "–ò–º—è –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–Ω–æ–≤–∞:")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        user_states[uid]["entry_name"] = text
        user_states[uid]["state"] = STATE_ADD_PASS
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ '{text}':")

    elif state == STATE_ADD_PASS:
        if not text:
            bot.send_message(message.chat.id, "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞:")
            return
        entry_name = user_states[uid].get("entry_name")
        data = load_data()
        if str(uid) not in data:
            data[str(uid)] = {}
        enc_password = fernet.encrypt(text.encode()).decode()
        data[str(uid)][entry_name] = enc_password
        save_data(data)
        bot.send_message(message.chat.id, f"–ü–∞—Ä–æ–ª—å –¥–ª—è '{entry_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üîí")
        user_states.pop(uid, None)

    elif state == STATE_GET_NAME:
        if not text:
            bot.send_message(message.chat.id, "–ò–º—è –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–Ω–æ–≤–∞:")
            return
        data = load_data()
        if str(uid) in data and text in data[str(uid)]:
            try:
                decrypted = fernet.decrypt(data[str(uid)][text].encode()).decode()
                bot.send_message(message.chat.id, f"–ü–∞—Ä–æ–ª—å –¥–ª—è '{text}':\n{decrypted}\n–ë–µ—Ä–µ–≥–∏—Ç–µ –µ–≥–æ!")
            except Exception:
                bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–µ –ø–∞—Ä–æ–ª—è.")
        else:
            bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        user_states.pop(uid, None)

    elif state == STATE_DELETE_NAME:
        if not text:
            bot.send_message(message.chat.id, "–ò–º—è –∑–∞–ø–∏—Å–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–Ω–æ–≤–∞:")
            return
        data = load_data()
        if str(uid) in data and text in data[str(uid)]:
            del data[str(uid)][text]
            save_data(data)
            bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—å '{text}' —É–¥–∞–ª–µ–Ω–∞.")
        else:
            bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Å—å —Å –∏–º–µ–Ω–µ–º '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        user_states.pop(uid, None)

    else:
        bot.send_message(message.chat.id,
                         "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        user_states.pop(uid, None)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    bot.infinity_polling()


def types():
    return None
